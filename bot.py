import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import json
import os
import asyncio
import difflib

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG)  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —É—Ä–æ–≤–Ω–µ DEBUG
logger = logging.getLogger(__name__)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
scope = ["https://spreadsheets.google.com/feeds", 'https://www.googleapis.com/auth/drive']
creds_dict = json.loads(os.environ['GOOGLE_CREDENTIALS'])
creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
client = gspread.authorize(creds)
sheet = client.open("–ü–µ—Ä–µ–¥–æ–≤–∏–∫ –≤–∞–∫–∞–Ω—Å–∏–∏ –ë–û–¢").sheet1

def get_data():
    return sheet.get_all_records()

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        logger.debug("Command /start received")  # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /start
        keyboard = [
            [InlineKeyboardButton("–ê–ö–¢–£–ê–õ–¨–ù–´–ï –í–ê–ö–ê–ù–°–ò–ò", callback_data="find_jobs")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–¥–æ–±—Ä–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é. –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π",
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"Error in start command: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /jobs –∏ –∫–Ω–æ–ø–∫–∞
async def jobs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        logger.debug("Fetching jobs data")  # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π
        data = get_data()
        lines = []
        for row in data:
            if row.get('–°–¢–ê–¢–£–°', '').strip().upper() == '–ù–ê–ë–ò–†–ê–ï–ú':
                for line in row['–í–∞–∫–∞–Ω—Å–∏—è'].splitlines():
                    lines.append(f"‚Ä¢ {line.strip()}")
        text = "\n".join(lines)

        if update.message:
            await update.message.reply_text("–°–ø–∏—Å–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π:\n\n" + text)
            await asyncio.sleep(1)
            await update.message.reply_text("–ö–∞–∫–∞—è –≤–∞–∫–∞–Ω—Å–∏—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?")
        elif update.callback_query:
            await update.callback_query.message.reply_text("–°–ø–∏—Å–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π:\n\n" + text)
            await asyncio.sleep(1)
            await update.callback_query.message.reply_text("–ö–∞–∫–∞—è –≤–∞–∫–∞–Ω—Å–∏—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?")
    except Exception as e:
        logger.error(f"Error in jobs command: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        logger.debug(f"Callback received with data: {query.data}")  # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ callback
        await query.answer()

        if query.data == "find_jobs":
            await jobs(update, context)
    except Exception as e:
        logger.error(f"Error in handle_callback: {e}")
        await update.callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")

# –û—Ç–≤–µ—Ç –Ω–∞ —Ç–µ–∫—Å—Ç
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        text = update.message.text.lower()
        data = get_data()

        all_titles = [row['–í–∞–∫–∞–Ω—Å–∏—è'] for row in data]
        matches = []

        for row in data:
            for line in row['–í–∞–∫–∞–Ω—Å–∏—è'].splitlines():
                if text in line.lower():
                    matches.append(row)
                    break
            elif difflib.get_close_matches(text, [line.lower()], cutoff=0.6):
                matches.append(row)
                break

        if matches:
            for row in matches:
                description = row.get('–û–ø–∏—Å–∞–Ω–∏–µ', '').strip()
                description_text = f"\n\nüìÉ –û–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏:\n\n{description}" if description else ""

                response = f"""
    üîß *{row['–í–∞–∫–∞–Ω—Å–∏—è']}*

    üìà –ß–∞—Å–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞:
    {row['–ß–∞—Å–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞']}

    üïê –í–∞—Ö—Ç–∞ 30/30 –ø–æ 12—á:
    {row['–í–∞—Ö—Ç–∞ –ø–æ 12 —á–∞—Å–æ–≤ (30/30)']}

    üïë –í–∞—Ö—Ç–∞ 60/30 –ø–æ 11—á:
    {row['–í–∞—Ö—Ç–∞ –ø–æ 11 —á (60/30)']}

    üìå –°—Ç–∞—Ç—É—Å: {row.get('–°–¢–ê–¢–£–°', '–Ω–µ —É–∫–∞–∑–∞–Ω')}{description_text}
    """

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
                keyboard = [
                    [InlineKeyboardButton("–û–¢–ö–õ–ò–ö–ù–£–¢–¨–°–Ø", callback_data=f"apply_{row['–í–∞–∫–∞–Ω—Å–∏—è']}"),
                     InlineKeyboardButton("–ù–ê–ó–ê–î", callback_data="back")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)

                await update.message.reply_markdown(response, reply_markup=reply_markup)
        else:
            await update.message.reply_text("–ù–µ –Ω–∞—à—ë–ª –≤–∞–∫–∞–Ω—Å–∏—é –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –µ—ë –ø–æ–ª–Ω–µ–µ.")
    except Exception as e:
        logger.error(f"Error in handle_message: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /back
async def back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        logger.debug("Back button clicked")  # –õ–æ–≥–∏—Ä—É–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ "–ù–ê–ó–ê–î" –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞
        keyboard = [
            [InlineKeyboardButton("–ê–ö–¢–£–ê–õ–¨–ù–´–ï –í–ê–ö–ê–ù–°–ò–ò", callback_data="find_jobs")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å callback_query, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        await update.callback_query.answer()

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ
        await update.callback_query.message.edit_text(
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–¥–æ–±—Ä–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é. –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π",
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"Error in back button handler: {e}")
        await update.callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–∫–ª–∏–∫–∞
async def handle_apply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        vacancy = query.data.split("_", 1)[1]  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
        logger.debug(f"User applied for vacancy: {vacancy}")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é
        await query.answer()
        await query.message.edit_text(f"–í—ã –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é: {vacancy}\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
    except Exception as e:
        logger.error(f"Error in handle_apply: {e}")
        await update.callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–∏–∫–µ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
app = ApplicationBuilder().token("7868075757:AAER7ENuM0L6WT_W5ZB0iRrVRUw8WeijbOo").build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("jobs", jobs))
app.add_handler(CommandHandler("back", back))
app.add_handler(CallbackQueryHandler(handle_callback))
app.add_handler(CallbackQueryHandler(handle_apply, pattern="apply_"))
app.add_handler(CallbackQueryHandler(back, pattern="back"))  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–ê–ó–ê–î"
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

app.run_polling()
