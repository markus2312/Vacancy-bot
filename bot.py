import os
import json
import re
import asyncio
import difflib
import gspread
import threading
from datetime import datetime
from flask import Flask
from oauth2client.service_account import ServiceAccountCredentials
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes

# --- Flask —Å–µ—Ä–≤–µ—Ä –¥–ª—è Railway ---
app_flask = Flask(__name__)

@app_flask.route('/')
def index():
    return '‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –Ω–µ —Å–ø–∏—Ç!'

# --- Google Sheets ---
scope = ["https://spreadsheets.google.com/feeds", 'https://www.googleapis.com/auth/drive']
creds_dict = json.loads(os.environ['GOOGLE_CREDENTIALS'])
creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
client = gspread.authorize(creds)

def get_data():
    sheet = client.open("–ü–µ—Ä–µ–¥–æ–≤–∏–∫ –≤–∞–∫–∞–Ω—Å–∏–∏ –ë–û–¢").sheet1
    return sheet.get_all_records()

def save_application_to_sheet(name, phone, vacancy, username):
    sheet = client.open_by_key("10TcAZPunK079FBN1gNQIU4XmInMEQ8Qz4CWeA6oDGvI")
    worksheet = sheet.worksheet("bot otkliki")
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    worksheet.append_row([now, name, phone, vacancy, f"@{username}" if username else "–±–µ–∑ username"],
                         value_input_option="USER_ENTERED")

# --- Telegram –ª–æ–≥–∏–∫–∞ ---
STATE_WAITING_FOR_FIO = 1
STATE_WAITING_FOR_PHONE = 2

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("–ê–ö–¢–£–ê–õ–¨–ù–´–ï –í–ê–ö–ê–ù–°–ò–ò", callback_data="find_jobs")]]
    await update.message.reply_text(
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–¥–æ–±—Ä–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é. –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def jobs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = get_data()
    lines = [f"‚Ä¢ {line.strip()}"
             for row in data if row.get('–°–¢–ê–¢–£–°', '').strip().upper() == '–ù–ê–ë–ò–†–ê–ï–ú'
             for line in row['–í–∞–∫–∞–Ω—Å–∏—è'].splitlines()]
    text = "\n".join(lines)

    if update.message:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π:\n\n" + text)
        await asyncio.sleep(1)
        await update.message.reply_text("–ö–∞–∫–∞—è –≤–∞–∫–∞–Ω—Å–∏—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?")
    elif update.callback_query:
        await update.callback_query.message.reply_text("–°–ø–∏—Å–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π:\n\n" + text)
        await asyncio.sleep(1)
        await update.callback_query.message.reply_text("–ö–∞–∫–∞—è –≤–∞–∫–∞–Ω—Å–∏—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?")

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    if update.callback_query.data == "find_jobs":
        await jobs(update, context)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    data = get_data()
    matches = []

    for row in data:
        for line in row['–í–∞–∫–∞–Ω—Å–∏—è'].splitlines():
            if text in line.lower() or difflib.get_close_matches(text, [line.lower()], cutoff=0.6):
                matches.append(row)
                break

    if matches:
        context.user_data['vacancy_matches'] = matches
        for i, row in enumerate(matches):
            description = row.get('–û–ø–∏—Å–∞–Ω–∏–µ', '').strip()
            description_text = f"\n\nüìÉ –û–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏:\n\n{description}" if description else ""
            response = f"""
üîß *{row['–í–∞–∫–∞–Ω—Å–∏—è']}*

üìà –ß–∞—Å–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞: {row['–ß–∞—Å–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞']}
üïê –í–∞—Ö—Ç–∞ 30/30 –ø–æ 12—á: {row['–í–∞—Ö—Ç–∞ –ø–æ 12 —á–∞—Å–æ–≤ (30/30)']}
üïë –í–∞—Ö—Ç–∞ 60/30 –ø–æ 11—á: {row['–í–∞—Ö—Ç–∞ –ø–æ 11 —á (60/30)']}
üìå –°—Ç–∞—Ç—É—Å: {row.get('–°–¢–ê–¢–£–°', '–Ω–µ —É–∫–∞–∑–∞–Ω')}{description_text}
"""
            keyboard = [
                [InlineKeyboardButton("–û–¢–ö–õ–ò–ö–ù–£–¢–¨–°–Ø", callback_data=f"apply_{i}"),
                 InlineKeyboardButton("–ù–ê–ó–ê–î", callback_data="back")]
            ]
            await update.message.reply_markdown(response, reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await update.message.reply_text("–ù–µ –Ω–∞—à—ë–ª –≤–∞–∫–∞–Ω—Å–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –µ—ë —Ç–æ—á–Ω–µ–µ.")

async def back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    keyboard = [[InlineKeyboardButton("–ê–ö–¢–£–ê–õ–¨–ù–´–ï –í–ê–ö–ê–ù–°–ò–ò", callback_data="find_jobs")]]
    await update.callback_query.message.reply_text(
        "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_apply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    index = int(update.callback_query.data.split("_")[1])
    data = context.user_data.get('vacancy_matches')
    if not data or index >= len(data):
        await update.callback_query.answer("–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    row = data[index]
    context.user_data['vacancy'] = row['–í–∞–∫–∞–Ω—Å–∏—è']
    context.user_data['state'] = STATE_WAITING_FOR_FIO
    await update.callback_query.answer()
    await update.callback_query.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {row['–í–∞–∫–∞–Ω—Å–∏—è']}\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")

async def handle_fio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    fio = update.message.text.strip()
    if not re.match(r"^[–ê-–Ø–∞-—è–Å—ë\s-]+$", fio):
        await update.message.reply_text("–§–ò–û –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã.")
        return
    context.user_data['fio'] = fio
    context.user_data['state'] = STATE_WAITING_FOR_PHONE
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

async def handle_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone = update.message.text.strip()
    if not re.match(r"^[\d+\(\)\- ]+$", phone):
        await update.message.reply_text("–ù–æ–º–µ—Ä –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, +, -, –ø—Ä–æ–±–µ–ª—ã –∏ ().")
        return
    context.user_data['phone'] = phone
    save_application_to_sheet(
        context.user_data['fio'],
        context.user_data['phone'],
        context.user_data['vacancy'],
        update.message.from_user.username
    )
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à –æ—Ç–∫–ª–∏–∫ –ø—Ä–∏–Ω—è—Ç.")
    context.user_data.clear()

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    state = context.user_data.get('state')
    if state == STATE_WAITING_FOR_FIO:
        await handle_fio(update, context)
    elif state == STATE_WAITING_FOR_PHONE:
        await handle_phone(update, context)
    else:
        await handle_message(update, context)

# --- –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ ---
def run_bot():
    application = ApplicationBuilder().token(os.environ["BOT_TOKEN"]).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("jobs", jobs))
    application.add_handler(CallbackQueryHandler(handle_callback, pattern="find_jobs"))
    application.add_handler(CallbackQueryHandler(handle_apply, pattern=r"apply_\d+"))
    application.add_handler(CallbackQueryHandler(back, pattern="back"))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))
    application.run_polling()

if __name__ == "__main__":
    threading.Thread(target=run_bot).start()
    port = int(os.environ.get("PORT", 5000))
    app_flask.run(host="0.0.0.0", port=port)
