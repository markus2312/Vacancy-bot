from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, ConversationHandler, filters, ContextTypes
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import json
import os

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
scope = ["https://spreadsheets.google.com/feeds", 'https://www.googleapis.com/auth/drive']
creds_dict = json.loads(os.environ['GOOGLE_CREDENTIALS'])
creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
client = gspread.authorize(creds)
sheet = client.open("–ü–µ—Ä–µ–¥–æ–≤–∏–∫ –≤–∞–∫–∞–Ω—Å–∏–∏ –ë–û–¢").worksheet("bot otkliki")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
GET_NAME, GET_PHONE = range(2)

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –≤–∞–∫–∞–Ω—Å–∏—è—Ö
def get_data():
    return sheet.get_all_records()

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ê–ö–¢–£–ê–õ–¨–ù–´–ï –í–ê–ö–ê–ù–°–ò–ò", callback_data="find_jobs")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–¥–æ–±—Ä–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é. –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π",
        reply_markup=reply_markup
    )

# –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π
async def jobs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = get_data()
    lines = []
    for row in data:
        if row.get('–°–¢–ê–¢–£–°', '').strip().upper() == '–ù–ê–ë–ò–†–ê–ï–ú':
            for line in row['–í–∞–∫–∞–Ω—Å–∏—è'].splitlines():
                lines.append(f"‚Ä¢ {line.strip()}")
    text = "\n".join(lines)

    if update.message:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π:\n\n" + text)
        await asyncio.sleep(1)
        await update.message.reply_text("–ö–∞–∫–∞—è –≤–∞–∫–∞–Ω—Å–∏—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?")
    elif update.callback_query:
        await update.callback_query.message.reply_text("–°–ø–∏—Å–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π:\n\n" + text)
        await asyncio.sleep(1)
        await update.callback_query.message.reply_text("–ö–∞–∫–∞—è –≤–∞–∫–∞–Ω—Å–∏—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–∫–ª–∏–∫–∞
async def start_application(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –æ—Ç–∫–ª–∏–∫–∞—é—Ç—Å—è
    vacancy_name = context.user_data.get('vacancy_name', '')
    if vacancy_name:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –≤–∞–∫–∞–Ω—Å–∏–∏
        keyboard = [
            [InlineKeyboardButton("–û–¢–ö–õ–ò–ö–ù–£–¢–¨–°–Ø", callback_data="start_application")],
            [InlineKeyboardButton("–ù–ê–ó–ê–î", callback_data="back")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        data = get_data()
        vacancy_description = ""
        for row in data:
            if row['–í–∞–∫–∞–Ω—Å–∏—è'] == vacancy_name:
                vacancy_description = row.get('–û–ø–∏—Å–∞–Ω–∏–µ', '')

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –¥–µ—Ç–∞–ª—è–º–∏ –≤–∞–∫–∞–Ω—Å–∏–∏
        vacancy_details = f"üîß *{vacancy_name}*\n\nüìÉ –û–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏:\n\n{vacancy_description}"

        await query.edit_message_text(vacancy_details, reply_markup=reply_markup)
    else:
        await query.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞–∫–∞–Ω—Å–∏—é, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    return GET_NAME  # –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö

# –°–±–æ—Ä –§–ò–û
async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_name = update.message.text
    context.user_data['name'] = user_name  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≤ user_data

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    return GET_PHONE

# –°–±–æ—Ä –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone = update.message.text
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞
    if not all(c.isdigit() or c in "+()-" for c in phone):
        await update.message.reply_text("–ü–æ—Ö–æ–∂–µ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –¥–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑.")
        return GET_PHONE  # –ü–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞

    context.user_data['phone'] = phone  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ user_data

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Google Sheets
    sheet.append_row([
        context.user_data.get('vacancy', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'),  # –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
        context.user_data['name'],  # –§–ò–û
        context.user_data['phone'],  # –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        update.message.from_user.username  # –¢–µ–ª–µ–≥—Ä–∞–º-–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ])

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await update.message.reply_text("–í–∞—à –æ—Ç–∫–ª–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å.")
    return ConversationHandler.END  # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ù–ê–ó–ê–î
async def back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏
    keyboard = [
        [InlineKeyboardButton("–ê–ö–¢–£–ê–õ–¨–ù–´–ï –í–ê–ö–ê–ù–°–ò–ò", callback_data="find_jobs")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–¥–æ–±—Ä–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é. –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π",
        reply_markup=reply_markup
    )

    return ConversationHandler.END  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏—é

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
async def job_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏—é, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –æ—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    vacancy_name = "–ü—Ä–∏–º–µ—Ä –≤–∞–∫–∞–Ω—Å–∏–∏"  # –ù–∞–ø—Ä–∏–º–µ—Ä, —ç—Ç–∞ –≤–∞–∫–∞–Ω—Å–∏—è, –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –µ—ë –∏–∑ –¥–∞–Ω–Ω—ã—Ö
    context.user_data['vacancy_name'] = vacancy_name

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = [
        [InlineKeyboardButton("–û–¢–ö–õ–ò–ö–ù–£–¢–¨–°–Ø", callback_data="start_application")],
        [InlineKeyboardButton("–ù–ê–ó–ê–î", callback_data="back")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –≤–∞–∫–∞–Ω—Å–∏–µ–π
    vacancy_details = f"üîß *{vacancy_name}*\n\n–û–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏: ..."

    await query.edit_message_text(vacancy_details, reply_markup=reply_markup)

# ConversationHandler
conversation_handler = ConversationHandler(
    entry_points=[CallbackQueryHandler(start_application, pattern="^start_application$")],
    states={
        GET_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
        GET_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
    },
    fallbacks=[CallbackQueryHandler(back, pattern="^back$")]
)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
app = ApplicationBuilder().token("7868075757:AAER7ENuM0L6WT_W5ZB0iRrVRUw8WeijbOo").build()

app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("jobs", jobs))
app.add_handler(CallbackQueryHandler(job_details, pattern="^find_jobs$"))
app.add_handler(conversation_handler)

app.run_polling()
