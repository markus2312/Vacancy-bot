from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes, ConversationHandler
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import json
import os
import difflib
import re
from datetime import datetime

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
scope = ["https://spreadsheets.google.com/feeds", 'https://www.googleapis.com/auth/drive']
creds_dict = json.loads(os.environ['GOOGLE_CREDENTIALS'])
creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
client = gspread.authorize(creds)
sheet = client.open("–ü–µ—Ä–µ–¥–æ–≤–∏–∫ –≤–∞–∫–∞–Ω—Å–∏–∏ –ë–û–¢").sheet1

def get_data():
    return sheet.get_all_records()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
STATE_WAITING_FOR_FIO = 1
STATE_WAITING_FOR_PHONE = 2
STATE_WAITING_FOR_VACANCY = 3
STATE_IDLE = 0

# –≠—Ç–∞–ø—ã –¥–ª—è ConversationHandler
FIO, PHONE = range(1, 3)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ê–ö–¢–£–ê–õ–¨–ù–´–ï –í–ê–ö–ê–ù–°–ò–ò", callback_data="find_jobs")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–¥–æ–±—Ä–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é. –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π",
        reply_markup=reply_markup
    )

# –ö–æ–º–∞–Ω–¥–∞ /jobs –∏ –∫–Ω–æ–ø–∫–∞
async def jobs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = get_data()
    lines = []
    for row in data:
        if row.get('–°–¢–ê–¢–£–°', '').strip().upper() == '–ù–ê–ë–ò–†–ê–ï–ú':
            for line in row['–í–∞–∫–∞–Ω—Å–∏—è'].splitlines():
                lines.append(f"‚Ä¢ {line.strip()}")
    text = "\n".join(lines)

    if update.message:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π:\n\n" + text)
        await update.message.reply_text("–ö–∞–∫–∞—è –≤–∞–∫–∞–Ω—Å–∏—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?")
    elif update.callback_query:
        await update.callback_query.message.reply_text("–°–ø–∏—Å–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π:\n\n" + text)
        await update.callback_query.message.reply_text("–ö–∞–∫–∞—è –≤–∞–∫–∞–Ω—Å–∏—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ê–ö–¢–£–ê–õ–¨–ù–´–ï –í–ê–ö–ê–ù–°–ò–ò"
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "find_jobs":
        await jobs(update, context)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ï—Å–ª–∏ –±–æ—Ç –æ–∂–∏–¥–∞–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–∏, –∏—â–µ–º –≤–∞–∫–∞–Ω—Å–∏—é
    if 'waiting_for_vacancy' in context.user_data and context.user_data['waiting_for_vacancy']:
        text = update.message.text.lower()
        data = get_data()
        matches = []

        for row in data:
            for line in row['–í–∞–∫–∞–Ω—Å–∏—è'].splitlines():
                if text in line.lower() or difflib.get_close_matches(text, [line.lower()], cutoff=0.6):
                    matches.append(row)
                    break

        if matches:
            for i, row in enumerate(matches):
                description = row.get('–û–ø–∏—Å–∞–Ω–∏–µ', '').strip()
                description_text = f"\n\nüìÉ –û–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏:\n\n{description}" if description else ""

                response = f"""
    üîß *{row['–í–∞–∫–∞–Ω—Å–∏—è']}*

    üìà –ß–∞—Å–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞:
    {row['–ß–∞—Å–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞']}

    üïê –í–∞—Ö—Ç–∞ 30/30 –ø–æ 12—á:
    {row['–í–∞—Ö—Ç–∞ –ø–æ 12 —á–∞—Å–æ–≤ (30/30)']}

    üïë –í–∞—Ö—Ç–∞ 60/30 –ø–æ 11—á:
    {row['–í–∞—Ö—Ç–∞ –ø–æ 11 —á (60/30)']}

    üìå –°—Ç–∞—Ç—É—Å: {row.get('–°–¢–ê–¢–£–°', '–Ω–µ —É–∫–∞–∑–∞–Ω')}{description_text}
    """

                keyboard = [
                    [InlineKeyboardButton("–û–¢–ö–õ–ò–ö–ù–£–¢–¨–°–Ø", callback_data=f"apply_{i}")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await update.message.reply_markdown(response, reply_markup=reply_markup)
        else:
            await update.message.reply_text("–ù–µ –Ω–∞—à—ë–ª –≤–∞–∫–∞–Ω—Å–∏—é –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –µ—ë –ø–æ–ª–Ω–µ–µ.")
        return

    # –ï—Å–ª–∏ –±–æ—Ç –æ–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥ –§–ò–û –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —Ç–æ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –§–ò–û
    if 'waiting_for_fio' in context.user_data and context.user_data['waiting_for_fio']:
        fio = update.message.text.strip()

        if not re.match(r"^[–ê-–Ø–∞-—è–Å—ë\s-]+$", fio):
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω–æ–µ –§–ò–û. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û —Ç–æ–ª—å–∫–æ —Å –±—É–∫–≤–∞–º–∏, –ø—Ä–æ–±–µ–ª–∞–º–∏ –∏ –¥–µ—Ñ–∏—Å–∞–º–∏.")
            return FIO

        context.user_data['fio'] = fio
        await update.message.reply_text("–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        return PHONE

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if 'waiting_for_phone' in context.user_data and context.user_data['waiting_for_phone']:
        phone = update.message.text.strip()

        if not re.match(r"^[\d+\(\)\- ]+$", phone):
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å —Ü–∏—Ñ—Ä–∞–º–∏, –∑–Ω–∞–∫–∞–º–∏ +, -, (), –ø—Ä–æ–±–µ–ª–∞–º–∏.")
            return PHONE

        context.user_data['phone'] = phone
        username = update.message.from_user.username

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets
        save_application_to_sheet(context.user_data['fio'], context.user_data['phone'], context.user_data['vacancy'], username)

        await update.message.reply_text(f"–í–∞—à –æ—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é {context.user_data['vacancy']} –ø—Ä–∏–Ω—è—Ç!\n"
                                        f"–§–ò–û: {context.user_data['fio']}\n"
                                        f"–¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data['phone']}\n\n"
                                        "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∫–ª–∏–∫!")

        # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        return ConversationHandler.END

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets
def save_application_to_sheet(name, phone, vacancy, username):
    sheet = client.open_by_key("10TcAZPunK079FBN1gNQIU4XmInMEQ8Qz4CWeA6oDGvI")
    worksheet = sheet.worksheet("bot otkliki")

    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    new_row = [now, name, phone, vacancy, f"@{username}" if username else "–±–µ–∑ username"]
    worksheet.append_row(new_row, value_input_option="USER_ENTERED")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ConversationHandler
conversation_handler = ConversationHandler(
    entry_points=[CallbackQueryHandler(handle_apply, pattern=r"apply_\d+")],
    states={
        FIO: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_fio)],
        PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_phone)],
    },
    fallbacks=[]
)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
app = ApplicationBuilder().token(os.environ["BOT_TOKEN"]).build()

# –•–µ–Ω–¥–ª–µ—Ä—ã
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("jobs", jobs))
app.add_handler(CallbackQueryHandler(handle_callback, pattern="find_jobs"))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
app.add_handler(conversation_handler)

app.run_polling()
