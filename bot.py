from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import json
import os
import asyncio
import difflib

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
scope = ["https://spreadsheets.google.com/feeds", 'https://www.googleapis.com/auth/drive']
creds_dict = json.loads(os.environ['GOOGLE_CREDENTIALS'])
creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
client = gspread.authorize(creds)
sheet = client.open("–ü–µ—Ä–µ–¥–æ–≤–∏–∫ –≤–∞–∫–∞–Ω—Å–∏–∏ –ë–û–¢").sheet1

def get_data():
    return sheet.get_all_records()

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ê–ö–¢–£–ê–õ–¨–ù–´–ï –í–ê–ö–ê–ù–°–ò–ò", callback_data="find_jobs")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–¥–æ–±—Ä–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é. –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π",
        reply_markup=reply_markup
    )

# –ö–æ–º–∞–Ω–¥–∞ /jobs –∏ –∫–Ω–æ–ø–∫–∞
async def jobs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = get_data()
    lines = []
    for row in data:
        if row.get('–°–¢–ê–¢–£–°', '').strip().upper() == '–ù–ê–ë–ò–†–ê–ï–ú':
            for line in row['–í–∞–∫–∞–Ω—Å–∏—è'].splitlines():
                lines.append(f"‚Ä¢ {line.strip()}")
    text = "\n".join(lines)

    if update.message:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π:\n\n" + text)
        await asyncio.sleep(1)
        await update.message.reply_text("–ö–∞–∫–∞—è –≤–∞–∫–∞–Ω—Å–∏—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?")
    elif update.callback_query:
        await update.callback_query.message.reply_text("–°–ø–∏—Å–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π:\n\n" + text)
        await asyncio.sleep(1)
        await update.callback_query.message.reply_text("–ö–∞–∫–∞—è –≤–∞–∫–∞–Ω—Å–∏—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ê–ö–¢–£–ê–õ–¨–ù–´–ï –í–ê–ö–ê–ù–°–ò–ò"
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "find_jobs":
        await jobs(update, context)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    data = get_data()
    matches = []

    # –ò—â–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for row in data:
        for line in row['–í–∞–∫–∞–Ω—Å–∏—è'].splitlines():
            if text in line.lower() or difflib.get_close_matches(text, [line.lower()], cutoff=0.6):
                matches.append(row)
                break

    if matches:
        for i, row in enumerate(matches):
            description = row.get('–û–ø–∏—Å–∞–Ω–∏–µ', '').strip()
            description_text = f"\n\nüìÉ –û–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏:\n\n{description}" if description else ""

            response = f"""
üîß *{row['–í–∞–∫–∞–Ω—Å–∏—è']}*

üìà –ß–∞—Å–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞:
{row['–ß–∞—Å–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞']}

üïê –í–∞—Ö—Ç–∞ 30/30 –ø–æ 12—á:
{row['–í–∞—Ö—Ç–∞ –ø–æ 12 —á–∞—Å–æ–≤ (30/30)']}

üïë –í–∞—Ö—Ç–∞ 60/30 –ø–æ 11—á:
{row['–í–∞—Ö—Ç–∞ –ø–æ 11 —á (60/30)']}

üìå –°—Ç–∞—Ç—É—Å: {row.get('–°–¢–ê–¢–£–°', '–Ω–µ —É–∫–∞–∑–∞–Ω')}{description_text}
"""

            keyboard = [
                [InlineKeyboardButton("–û–¢–ö–õ–ò–ö–ù–£–¢–¨–°–Ø", callback_data=f"apply_{i}"),
                 InlineKeyboardButton("–ù–ê–ó–ê–î", callback_data="back")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_markdown(response, reply_markup=reply_markup)
    else:
        await update.message.reply_text("–ù–µ –Ω–∞—à—ë–ª –≤–∞–∫–∞–Ω—Å–∏—é –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –µ—ë –ø–æ–ª–Ω–µ–µ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–ê–ó–ê–î"
async def back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    keyboard = [
        [InlineKeyboardButton("–ê–ö–¢–£–ê–õ–¨–ù–´–ï –í–ê–ö–ê–ù–°–ò–ò", callback_data="find_jobs")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.message.reply_text(
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–¥–æ–±—Ä–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é. –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é
async def apply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤–∞–∫–∞–Ω—Å–∏–∏
    vacancy_index = int(query.data.split('_')[1])
    data = get_data()
    vacancy = data[vacancy_index]['–í–∞–∫–∞–Ω—Å–∏—è']

    context.user_data['vacancy'] = vacancy  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–∫–∞–Ω—Å–∏—é –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await query.message.reply_text(f"–í—ã –æ—Ç–∫–ª–∏–∫–∞–µ—Ç–µ—Å—å –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é: {vacancy}\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –§–ò–û
async def handle_fio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    fio = update.message.text.strip()

    context.user_data['fio'] = fio  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –§–ò–û

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

    return "PHONE"

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
async def handle_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone = update.message.text.strip()

    context.user_data['phone'] = phone  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∫–ª–∏–∫ –≤ Google Sheets
    save_application_to_sheet(context.user_data['fio'], context.user_data['phone'], context.user_data['vacancy'], update.message.from_user.username)

    await update.message.reply_text(f"–í–∞—à –æ—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é {context.user_data['vacancy']} –ø—Ä–∏–Ω—è—Ç!\n"
                                    f"–§–ò–û: {context.user_data['fio']}\n"
                                    f"–¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data['phone']}\n\n"
                                    "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∫–ª–∏–∫!")

    return "END"

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª–∏–∫–∞ –≤ Google Sheets
def save_application_to_sheet(name, phone, vacancy, username):
    sheet = client.open_by_key("10TcAZPunK079FBN1gNQIU4XmInMEQ8Qz4CWeA6oDGvI")
    worksheet = sheet.worksheet("bot otkliki")

    new_row = [name, phone, vacancy, f"@{username}" if username else "–±–µ–∑ username"]
    worksheet.append_row(new_row, value_input_option="USER_ENTERED")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
async def end(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞! –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è.")
    return "END"

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
app = ApplicationBuilder().token(os.environ["BOT_TOKEN"]).build()

app.add_handler(CommandHandler("start", start))
app.add_handler(CallbackQueryHandler(handle_callback, pattern="find_jobs"))
app.add_handler(CallbackQueryHandler(apply, pattern=r"apply_\d+"))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

app.run_polling()
